var o=Object.defineProperty;var a=(e,t,n)=>t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n;var i=(e,t,n)=>a(e,typeof t!="symbol"?t+"":t,n);class r{constructor(){i(this,"_webApp",Telegram.WebApp);i(this,"_backButton",Telegram.WebApp.BackButton);i(this,"_appData",Telegram.Utils.urlParseQueryString(this._webApp.initData));i(this,"webAppUser",JSON.parse(this._appData.user));i(this,"user",{id:this.webAppUser.id,username:this.webAppUser.username});this.applyColorScheme()}get userId(){if(this.user.id)return this.user.id;throw"No user id"}get platformName(){return this._appData.platform}get colorScheme(){return this._webApp.colorScheme}showBackButton(){this._backButton.show()}hideBackButton(){this._backButton.hide()}onBackButtonClick(t){this._backButton.onClick(t)}envokeHaptic(t){try{this._webApp.HapticFeedback.impactOccurred(t)}catch(n){console.error(n)}}close(){this._webApp.close()}showMainButton(t){this._webApp.MainButton.text=t,this._webApp.MainButton.show()}setMainButtonText(t){this._webApp.MainButton.setText(t)}onMainButtonClick(t){this._webApp.MainButton.onClick(t)}offMainButtonClick(t){this._webApp.MainButton.offClick(t)}hideMainButton(){this._webApp.MainButton.hide()}applyColorScheme(){this._webApp.colorScheme==="dark"?document.documentElement.classList.add("dark"):document.documentElement.classList.remove("dark")}}class s{getEnvironment(){try{let t=Telegram.WebApp.initData;return new r}catch(t){return console.info("You can use this website only with this telegram bot: undefined"),t}}}const c=new s;export{r as T,c as p};
